#!/usr/bin/env bash

set -e

# CNB buildpack specific variables
LAYERS_DIR="$1"
PLATFORM_DIR="$2"
APP_DIR="/workspace"

echo "-----> Installing Heroku AppLink Service Mesh..."

# Create layers directory structure
LAYER_DIR="${LAYERS_DIR}/service-mesh"
mkdir -p "$LAYER_DIR"

# Read allowed environment variables from platform directory
if [ -f "${PLATFORM_DIR}/env/HEROKU_APPLINK_SERVICE_MESH_S3_BUCKET" ]; then
    export HEROKU_APPLINK_SERVICE_MESH_S3_BUCKET=$(cat "${PLATFORM_DIR}/env/HEROKU_APPLINK_SERVICE_MESH_S3_BUCKET")
fi

if [ -f "${PLATFORM_DIR}/env/HEROKU_APPLINK_SERVICE_MESH_RELEASE_VERSION" ]; then
    export HEROKU_APPLINK_SERVICE_MESH_RELEASE_VERSION=$(cat "${PLATFORM_DIR}/env/HEROKU_APPLINK_SERVICE_MESH_RELEASE_VERSION")
fi

source "$(dirname "$0")/../lib/applink_installer.sh"

# Determine current arch for caching
CURRENT_ARCH=$(detect_arch)

# Get current ETag from S3 to check for changes
S3_BUCKET="${HEROKU_APPLINK_SERVICE_MESH_S3_BUCKET:-heroku-applink-service-mesh-binaries}"
VERSION="${HEROKU_APPLINK_SERVICE_MESH_RELEASE_VERSION:-latest}"
BINARY_NAME="heroku-applink-service-mesh-${VERSION}-${CURRENT_ARCH}"
S3_URL="https://${S3_BUCKET}.s3.amazonaws.com/${BINARY_NAME}"

echo "-----> Checking for cached Heroku AppLink Service Mesh..."
CURRENT_ETAG=$(curl -sI "$S3_URL" | grep -i etag | cut -d'"' -f2 | tr -d '\r')

# Check if we can reuse the existing layer
LAYER_NEEDS_REBUILD=true
if [ -f "${LAYER_DIR}.toml" ]; then
    # Read cached metadata (handle indented TOML)
    CACHED_ETAG=$(grep "etag = " "${LAYER_DIR}.toml" | cut -d'"' -f2 2>/dev/null || echo "")
    CACHED_ARCH=$(grep "arch = " "${LAYER_DIR}.toml" | cut -d'"' -f2 2>/dev/null || echo "")

    # Check if binary exists and metadata matches
    if [ -f "${LAYER_DIR}/bin/heroku-applink-service-mesh" ] && \
       [ "$CACHED_ETAG" = "$CURRENT_ETAG" ] && \
       [ "$CACHED_ARCH" = "$CURRENT_ARCH" ]; then
        echo "-----> Reusing cached Heroku AppLink Service Mesh"
        LAYER_NEEDS_REBUILD=false
    fi
fi

if [ "$LAYER_NEEDS_REBUILD" = "true" ]; then
    # Install binary to layer bin directory (automatically added to PATH)
    mkdir -p "${LAYER_DIR}/bin"
    if ! install_applink_binary "${LAYER_DIR}/bin" "$CURRENT_ARCH" "$VERSION" "$S3_BUCKET"; then
        echo " !     Failed to install Heroku AppLink Service Mesh binary"
        exit 1
    fi
fi

# Create/update layer metadata
cat > "${LAYER_DIR}.toml" << EOL
[types]
launch = true
build = false
cache = true

[metadata]
etag = "${CURRENT_ETAG}"
arch = "${CURRENT_ARCH}"
EOL


# Read web process from Procfile
echo "-----> Reading web process from Procfile..."
if [ -f "${APP_DIR}/Procfile" ]; then
    WEB_COMMAND=$(grep "^web:" "${APP_DIR}/Procfile" | sed 's/^web: //')
    if [ -z "$WEB_COMMAND" ]; then
        echo " !     No web process found in Procfile"
        exit 1
    fi

    BINARY_NAME="heroku-applink-service-mesh"

    # Check if web command already contains the binary name
    if [[ "$WEB_COMMAND" =~ "$BINARY_NAME" ]]; then
        echo " !     Web process already contains the heroku-applink-service-mesh binary name"
    else
        # Create launch.toml to set the start command
        cat > "${LAYERS_DIR}/launch.toml" << EOL
[[processes]]
type = "web"
command = ["${APPLINK_BINARY_NAME}", "${WEB_COMMAND}"]
EOL

        echo "-----> Command to be executed: ${APPLINK_BINARY_NAME} ${WEB_COMMAND}"
        echo "-----> The service mesh will automatically wrap your web process at runtime"
    fi
else
    echo " !     Procfile not found at ${APP_DIR}/Procfile"
    exit 1
fi

echo "-----> Done!"

